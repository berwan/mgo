use array;
use io;
use graph;

use stone;
use constants as C;
use debug;

grNum = 0;

class Group forward;

function getXY(s: stone.Stone, direction)
   case direction
      in C.L:
         return [s.x-1, s.y];
      in C.U:
         return [s.x, s.y-1];
      in C.R:
         return [s.x+1, s.y];
      in C.D:
         return [s.x, s.y+1];
   end;
end;

class InBoard
   content;
   last : stone.Stone;
   history;
   historyCurrent;
   groups;
   curGroup;


   function init(size)
      content = array.create(size, size, null);
      history = [];
      historyCurrent = 0;
      groups = [];
   end;

   function addStone(s: stone.Stone) forward;
   function getGroup(s: stone.Stone): Group forward;
   function makeGroupConnection(s: stone.Stone, g) forward;
   function updateGroups(id) forward;
   function newGroup(color) : Group forward;

   function getLast()
      return last;
   end;

   function removeStone(x, y)
      content[x][y-1] = null;
   end;

   function getStone(x, y) : stone.Stone
      if x < 0 or y > 19 then
         return null;
      end;
      if x < 0 or y > 19 then
         return null;
      end;
      if content[x][y-1] # null then
         return content[x][y-1];
      else
         return null;
      end;
   end;

   function getStoneColour(x, y)
      if x < 0 or y > 19 then
         return null;
      end;
      if x < 0 or y > 19 then
         return null;
      end;
      if content[x][y-1] # null then
         return content[x][y-1].(stone.Stone)getColour();
      else
         return null;
      end;
   end;

   function getStoneAt(s, direction)// s: stone.Stone
      xy = getXY(s, direction);
      return getStone(xy[0], xy[1]);
   end;

   function getColourAt(s, direction)
      xy = getXY(s, direction);
      return getStoneColour(xy[0], xy[1]);
   end;

   function historyBack() : stone.Stone
      try
         historyCurrent -= 1;
         return history[historyCurrent];
      catch excp by
         historyCurrent = 0;
         return null;
      end;
   end;
end;

class Group
   content;
   liberties;
   colour;
   inBoard: InBoard;
   tmp;
   id;

   function init(c, board: InBoard)
      content = [];
      tmp = [];
      liberties = 0;
      colour = c;
      inBoard = board;
      id = ..grNum;
      ..grNum++;
   end;

   function resetTmp()
      tmp = [];
   end;

   function size()
      return .len(content);
   end;

   function addStone(s: stone.Stone)
      .append(content, s);
      colour = s.colour;
   end

   function removeStone(s: stone.Stone)
      l = .len(content);
      i = 0;
      while i < l do
         if content[i].(stone.Stone)x = s.x and
          content[i].(stone.Stone)y = s.y then
            array.remove(content, i);
            break;
         end;
         i++;
      end;
   end;

   function addXY(xy)
      if array.index(tmp, [xy[0], xy[1]]) = -1 then
         .append(tmp, [xy[0], xy[1]]);
      end;
   end;

   function clearAll()
      for i in content do
         i.(stone.Stone)check(false);
      end;
   end;

   function getColourAt(s: stone.Stone, direction)
      case direction
         in C.L:
            return inBoard.getStoneColour(s.x-1, s.y);
         in C.U:
            return inBoard.getStoneColour(s.x, s.y-1);
         in C.R:
            return inBoard.getStoneColour(s.x+1, s.y);
         in C.D:
            return inBoard.getStoneColour(s.x, s.y+1);
      end;
   end;

   function getStoneAt(s: stone.Stone, direction)
      case direction
         in C.L:
            return inBoard.getStone(s.x-1, s.y);
         in C.U:
            return inBoard.getStone(s.x, s.y-1);
         in C.R:
            return inBoard.getStone(s.x+1, s.y);
         in C.D:
            return inBoard.getStone(s.x, s.y+1);
      end;
   end;

   function calculateLibertiesOf(s: stone.Stone, lib)
      l = lib;

      if not s.isChecked() then
         s.check(true);
         for i in [C.L, C.U, C.R, C.D] do
            c = getColourAt(s, i);
            if c = null then
               addXY(getXY(s,i));
               l = .len(tmp);
            elsif c = s.colour then
               xy = getXY(s, i);
               l = calculateLibertiesOf(inBoard.getStone(xy[0], xy[1]), l);
            end;
         end;
      end;
      return l;
   end;

   function hasStone(s: stone.Stone)
      for i in content do
         xy = i.(stone.Stone)getXY();
         if xy[0] = s.x and xy[1] = s.y then
            return true;
         end;
      end;
      return false;
   end;

end;

function InBoard.addStone(s: stone.Stone)
   content[s.x][s.y-1] = s;
   last = s;
   .append(history, s);
   historyCurrent += 1;

   gr = newGroup(s.colour);
   gr.(Group)addStone(s);
   l = gr.(Group)calculateLibertiesOf(s,0);


   debug.debug2("group id %d  %d", gr.(Group)id, l);
   makeGroupConnection(s, gr);
   l = gr.(Group)calculateLibertiesOf(s,0);
end;

function InBoard.getGroup(s: stone.Stone): Group
   for i in groups do
      for st in i.(Group)content do
         if st.(stone.Stone)x = s.x and
         st.(stone.Stone)y = s.y then
            return i;
         end;
      end;
   end;

   return null;
end;

function InBoard.updateGroups(id)
   print "len=",.len(groups), id, ..grNum;
   j = 0;
   while j < len(groups) do
      if groups[j].(Group)id = j then
         array.remove(groups, j);
         break;
      end;
      j++;
   end;

   while j < len(groups) do
      groups[j].(Group)id = j;
      j++;
   end;
   ..grNum = j;
end;

function InBoard.makeGroupConnection(s: stone.Stone, g: Group)
   for i in [C.L, C.U, C.R, C.D] do
      st : stone.Stone = getStoneAt(s, i);
      if st # null then
         gr: Group = getGroup(st);
         if gr # null then
            print s.x, s.y, st.x, st.y;
            print gr.id, g.id;
            if gr.colour = g.colour and gr.id # g.id then
               gr.content = array.concat(gr.content, g.content);
               updateGroups(g.id);
            end;
         end;
      end;
   end;
end;

function InBoard.newGroup(colour) : Group;
   g : Group = Group(colour, this);
   .append(groups, g);
   return g;
end

